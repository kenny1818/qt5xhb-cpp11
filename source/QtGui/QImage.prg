/*

  Qt5xHb/C++11 - Bindings libraries for Harbour/xHarbour and Qt Framework 5

  Copyright (C) 2021 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>

*/

/*
  DO NOT EDIT THIS FILE - the content was created using a source code generator
*/

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QCOLOR
REQUEST QMATRIX
REQUEST QPOINT
REQUEST QRECT
REQUEST QSIZE
REQUEST QTRANSFORM
#endif

CLASS QImage INHERIT QPaintDevice

   METHOD new
   METHOD new9
   METHOD new10
   METHOD delete
   METHOD allGray
   METHOD bitPlaneCount
   METHOD byteCount
   METHOD bytesPerLine
   METHOD cacheKey
   METHOD color
   METHOD colorCount
   METHOD colorTable
   METHOD convertToFormat
   METHOD copy
   METHOD createAlphaMask
   METHOD createHeuristicMask
   METHOD createMaskFromColor
   METHOD depth
   METHOD dotsPerMeterX
   METHOD dotsPerMeterY
   METHOD fill
   METHOD format
   METHOD hasAlphaChannel
   METHOD height
   METHOD invertPixels
   METHOD isGrayscale
   METHOD isNull
   METHOD load
   METHOD loadFromData
   METHOD mirrored
   METHOD offset
   METHOD pixel
   METHOD pixelIndex
   METHOD rect
   METHOD rgbSwapped
   METHOD save
   METHOD scaled
   METHOD scaledToHeight
   METHOD scaledToWidth
   METHOD scanLine
   METHOD setColor
   METHOD setColorCount
   METHOD setDotsPerMeterX
   METHOD setDotsPerMeterY
   METHOD setOffset
   METHOD setPixel
   METHOD setText
   METHOD size
   METHOD swap
   METHOD text
   METHOD textKeys
   METHOD transformed
   METHOD valid
   METHOD width
   METHOD fromData
   METHOD trueMatrix
   METHOD pixelColor
   METHOD reinterpretAsFormat
   METHOD setPixelColor
   METHOD convertTo
   METHOD toVariant
   METHOD fromVariant

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QImage
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtGui/QImage>
#endif

#include "qt5xhb_common.h"
#include "qt5xhb_macros.h"
#include "qt5xhb_utils.h"

#ifdef __XHARBOUR__
#include <QtGui/QImage>
#endif

#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtGui/QColor>

/*
QImage()
*/
void QImage_new1()
{
  auto obj = new QImage();
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const QSize & size, QImage::Format format )
*/
void QImage_new2()
{
  auto obj = new QImage( *PQSIZE( 1 ), static_cast<QImage::Format>( hb_parni( 2 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( int width, int height, QImage::Format format )
*/
void QImage_new3()
{
  auto obj = new QImage( PINT( 1 ), PINT( 2 ), static_cast<QImage::Format>( hb_parni( 3 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( uchar * data, int width, int height, QImage::Format format )
*/
void QImage_new4()
{
  auto obj = new QImage( ( uchar * ) hb_parc( 1 ), PINT( 2 ), PINT( 3 ), static_cast<QImage::Format>( hb_parni( 4 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const uchar * data, int width, int height, QImage::Format format )
*/
void QImage_new5()
{
  auto obj = new QImage( PCONSTUCHAR( 1 ), PINT( 2 ), PINT( 3 ), static_cast<QImage::Format>( hb_parni( 4 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( uchar * data, int width, int height, int bytesPerLine, QImage::Format format )
*/
void QImage_new6()
{
  auto obj = new QImage( ( uchar * ) hb_parc( 1 ), PINT( 2 ), PINT( 3 ), PINT( 4 ), static_cast<QImage::Format>( hb_parni( 5 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const uchar * data, int width, int height, int bytesPerLine, QImage::Format format )
*/
void QImage_new7()
{
  auto obj = new QImage( PCONSTUCHAR( 1 ), PINT( 2 ), PINT( 3 ), PINT( 4 ), static_cast<QImage::Format>( hb_parni( 5 ) ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const QString & fileName, const char * format = nullptr )
*/
HB_FUNC_STATIC( QIMAGE_NEW9 )
{
  auto obj = new QImage( PQSTRING( 1 ), OPCONSTCHAR( 2, nullptr ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const char * fileName, const char * format = nullptr )
*/
HB_FUNC_STATIC( QIMAGE_NEW10 )
{
  auto obj = new QImage( PCONSTCHAR( 1 ), OPCONSTCHAR( 2, nullptr ) );
  Qt5xHb::returnNewObject( obj, true );
}

/*
QImage( const QImage & image )
*/
void QImage_new11()
{
  auto obj = new QImage( *PQIMAGE( 1 ) );
  Qt5xHb::returnNewObject( obj, true );
}

HB_FUNC_STATIC( QIMAGE_NEW )
{
  if( ISNUMPAR( 0 ) )
  {
    QImage_new1();
  }
  else if( ISNUMPAR( 2 ) && ISQSIZE( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_new2();
  }
  else if( ISNUMPAR( 3 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
  {
    QImage_new3();
  }
  else if( ISBETWEEN( 1, 2 ) && HB_ISCHAR( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) )
  {
    HB_FUNC_EXEC( QIMAGE_NEW9 );
  }
  else if( ISNUMPAR( 1 ) && ISQIMAGE( 1 ) )
  {
    QImage_new11();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

HB_FUNC_STATIC( QIMAGE_DELETE )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    delete obj;
    obj = nullptr;
    PHB_ITEM self = hb_stackSelfItem();
    PHB_ITEM ptr = hb_itemPutPtr( nullptr, nullptr );
    hb_objSendMsg( self, "_pointer", 1, ptr );
    hb_itemRelease( ptr );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool allGray() const
*/
HB_FUNC_STATIC( QIMAGE_ALLGRAY )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RBOOL( obj->allGray() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int bitPlaneCount() const
*/
HB_FUNC_STATIC( QIMAGE_BITPLANECOUNT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->bitPlaneCount() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int byteCount() const
*/
HB_FUNC_STATIC( QIMAGE_BYTECOUNT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->byteCount() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int bytesPerLine() const
*/
HB_FUNC_STATIC( QIMAGE_BYTESPERLINE )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->bytesPerLine() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
qint64 cacheKey() const
*/
HB_FUNC_STATIC( QIMAGE_CACHEKEY )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RQINT64( obj->cacheKey() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QRgb color( int i ) const
*/
HB_FUNC_STATIC( QIMAGE_COLOR )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
    {
#endif
      RQRGB( obj->color( PINT( 1 ) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int colorCount() const
*/
HB_FUNC_STATIC( QIMAGE_COLORCOUNT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->colorCount() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QVector<QRgb> colorTable() const
*/
HB_FUNC_STATIC( QIMAGE_COLORTABLE )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      QVector<QRgb> list = obj->colorTable();
      PHB_ITEM pArray = hb_itemArrayNew( 0 );
      for( auto i = 0; i < list.count(); i++ )
      {
        PHB_ITEM pItem = hb_itemPutNI( nullptr, static_cast< QRgb >( list[ i ] ) );
        hb_arrayAddForward( pArray, pItem );
        hb_itemRelease( pItem );
      }
      hb_itemReturnRelease( pArray );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage convertToFormat( QImage::Format format, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
*/
void QImage_convertToFormat1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->convertToFormat( static_cast<QImage::Format>( hb_parni( 1 ) ), HB_ISNIL( 2 ) ? static_cast< Qt::ImageConversionFlags >( Qt::AutoColor ) : static_cast< Qt::ImageConversionFlags >( hb_parni( 2 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

/*
QImage convertToFormat( QImage::Format format, const QVector<QRgb> & colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
*/
void QImage_convertToFormat2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    QVector<QRgb> par2;
    PHB_ITEM aList2 = hb_param( 2, HB_IT_ARRAY );
    int nLen2 = hb_arrayLen( aList2 );
    QRgb temp2;
    for( auto i2 = 0; i2 < nLen2; i2++ )
    {
      temp2 = (QRgb) hb_arrayGetNI(aList2, i2+1);
      par2 << temp2;
    }
    auto ptr = new QImage( obj->convertToFormat( static_cast<QImage::Format>( hb_parni( 1 ) ), par2, HB_ISNIL( 3 ) ? static_cast< Qt::ImageConversionFlags >( Qt::AutoColor ) : static_cast< Qt::ImageConversionFlags >( hb_parni( 3 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

HB_FUNC_STATIC( QIMAGE_CONVERTTOFORMAT )
{
  if( ISBETWEEN( 1, 2 ) && HB_ISNUM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_convertToFormat1();
  }
  else if( ISBETWEEN( 2, 3 ) && HB_ISNUM( 1 ) && HB_ISARRAY( 2 ) && ( HB_ISNUM( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_convertToFormat2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage copy( const QRect & rectangle = QRect() ) const
*/
void QImage_copy1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->copy( HB_ISNIL( 1 ) ? QRect() : *static_cast< QRect * >( Qt5xHb::itemGetPtr( 1 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

/*
QImage copy( int x, int y, int width, int height ) const
*/
void QImage_copy2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->copy( PINT( 1 ), PINT( 2 ), PINT( 3 ), PINT( 4 ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

HB_FUNC_STATIC( QIMAGE_COPY )
{
  if( ISBETWEEN( 0, 1 ) && ( ISQRECT( 1 ) || HB_ISNIL( 1 ) ) )
  {
    QImage_copy1();
  }
  else if( ISNUMPAR( 4 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
  {
    QImage_copy2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage createAlphaMask( Qt::ImageConversionFlags flags = Qt::AutoColor ) const
*/
HB_FUNC_STATIC( QIMAGE_CREATEALPHAMASK )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 0, 1 ) && ( HB_ISNUM( 1 ) || HB_ISNIL( 1 ) ) )
    {
#endif
      auto ptr = new QImage( obj->createAlphaMask( HB_ISNIL( 1 ) ? static_cast< Qt::ImageConversionFlags >( Qt::AutoColor ) : static_cast< Qt::ImageConversionFlags >( hb_parni( 1 ) ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage createHeuristicMask( bool clipTight = true ) const
*/
HB_FUNC_STATIC( QIMAGE_CREATEHEURISTICMASK )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 0, 1 ) && ( HB_ISLOG( 1 ) || HB_ISNIL( 1 ) ) )
    {
#endif
      auto ptr = new QImage( obj->createHeuristicMask( OPBOOL( 1, true ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage createMaskFromColor( QRgb color, Qt::MaskMode mode = Qt::MaskInColor ) const
*/
HB_FUNC_STATIC( QIMAGE_CREATEMASKFROMCOLOR )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 1, 2 ) && HB_ISNUM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
    {
#endif
      auto ptr = new QImage( obj->createMaskFromColor( PQRGB( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::MaskMode >( Qt::MaskInColor ) : static_cast< Qt::MaskMode >( hb_parni( 2 ) ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int depth() const
*/
HB_FUNC_STATIC( QIMAGE_DEPTH )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->depth() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int dotsPerMeterX() const
*/
HB_FUNC_STATIC( QIMAGE_DOTSPERMETERX )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->dotsPerMeterX() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int dotsPerMeterY() const
*/
HB_FUNC_STATIC( QIMAGE_DOTSPERMETERY )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->dotsPerMeterY() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
void fill( uint pixelValue )
*/
void QImage_fill1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->fill( PUINT( 1 ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void fill( Qt::GlobalColor color )
*/
void QImage_fill2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->fill( static_cast<Qt::GlobalColor>( hb_parni( 1 ) ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void fill( const QColor & color )
*/
void QImage_fill3()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->fill( HB_ISOBJECT( 1 ) ? *static_cast< QColor * >( Qt5xHb::itemGetPtr( 1 ) ) : QColor( hb_parc( 1 ) ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

HB_FUNC_STATIC( QIMAGE_FILL )
{
  if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
  {
    QImage_fill1();
  }
  else if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
  {
    QImage_fill2();
  }
  else if( ISNUMPAR( 1 ) && ( ISQCOLOR( 1 )|| HB_ISCHAR( 1 ) ) )
  {
    QImage_fill3();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage::Format format() const
*/
HB_FUNC_STATIC( QIMAGE_FORMAT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RENUM( obj->format() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
bool hasAlphaChannel() const
*/
HB_FUNC_STATIC( QIMAGE_HASALPHACHANNEL )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RBOOL( obj->hasAlphaChannel() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
int height() const
*/
HB_FUNC_STATIC( QIMAGE_HEIGHT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->height() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
void invertPixels( QImage::InvertMode mode = QImage::InvertRgb )
*/
HB_FUNC_STATIC( QIMAGE_INVERTPIXELS )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 0, 1 ) && ( HB_ISNUM( 1 ) || HB_ISNIL( 1 ) ) )
    {
#endif
      obj->invertPixels( HB_ISNIL( 1 ) ? static_cast< QImage::InvertMode >( QImage::InvertRgb ) : static_cast< QImage::InvertMode >( hb_parni( 1 ) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
bool isGrayscale() const
*/
HB_FUNC_STATIC( QIMAGE_ISGRAYSCALE )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RBOOL( obj->isGrayscale() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
bool isNull() const
*/
HB_FUNC_STATIC( QIMAGE_ISNULL )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RBOOL( obj->isNull() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
bool load( const QString & fileName, const char * format = nullptr )
*/
void QImage_load1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->load( PQSTRING( 1 ), OPCONSTCHAR( 2, nullptr ) ) );
  }
}

/*
bool load( QIODevice * device, const char * format )
*/
void QImage_load2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->load( PQIODEVICE( 1 ), PCONSTCHAR( 2 ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_LOAD )
{
  if( ISBETWEEN( 1, 2 ) && HB_ISCHAR( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_load1();
  }
  else if( ISNUMPAR( 2 ) && ISQIODEVICE( 1 ) && HB_ISCHAR( 2 ) )
  {
    QImage_load2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool loadFromData( const uchar * data, int len, const char * format = nullptr )
*/
void QImage_loadFromData1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->loadFromData( PCONSTUCHAR( 1 ), PINT( 2 ), OPCONSTCHAR( 3, nullptr ) ) );
  }
}

/*
bool loadFromData( const QByteArray & data, const char * format = nullptr )
*/
void QImage_loadFromData2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->loadFromData( *PQBYTEARRAY( 1 ), OPCONSTCHAR( 2, nullptr ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_LOADFROMDATA )
{
  if( ISBETWEEN( 2, 3 ) && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && ( HB_ISCHAR( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_loadFromData1();
  }
  else if( ISBETWEEN( 1, 2 ) && ISQBYTEARRAY( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_loadFromData2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage mirrored( bool horizontal = false, bool vertical = true ) const
*/
HB_FUNC_STATIC( QIMAGE_MIRRORED )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 0, 2 ) && ( HB_ISLOG( 1 ) || HB_ISNIL( 1 ) ) && ( HB_ISLOG( 2 ) || HB_ISNIL( 2 ) ) )
    {
#endif
      auto ptr = new QImage( obj->mirrored( OPBOOL( 1, false ), OPBOOL( 2, true ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QPoint offset() const
*/
HB_FUNC_STATIC( QIMAGE_OFFSET )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      auto ptr = new QPoint( obj->offset() );
      Qt5xHb::createReturnClass( ptr, "QPOINT", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QRgb pixel( const QPoint & position ) const
*/
void QImage_pixel1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RQRGB( obj->pixel( *PQPOINT( 1 ) ) );
  }
}

/*
QRgb pixel( int x, int y ) const
*/
void QImage_pixel2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RQRGB( obj->pixel( PINT( 1 ), PINT( 2 ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_PIXEL )
{
  if( ISNUMPAR( 1 ) && ISQPOINT( 1 ) )
  {
    QImage_pixel1();
  }
  else if( ISNUMPAR( 2 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_pixel2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
int pixelIndex( const QPoint & position ) const
*/
void QImage_pixelIndex1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RINT( obj->pixelIndex( *PQPOINT( 1 ) ) );
  }
}

/*
int pixelIndex( int x, int y ) const
*/
void QImage_pixelIndex2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RINT( obj->pixelIndex( PINT( 1 ), PINT( 2 ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_PIXELINDEX )
{
  if( ISNUMPAR( 1 ) && ISQPOINT( 1 ) )
  {
    QImage_pixelIndex1();
  }
  else if( ISNUMPAR( 2 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_pixelIndex2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QRect rect() const
*/
HB_FUNC_STATIC( QIMAGE_RECT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      auto ptr = new QRect( obj->rect() );
      Qt5xHb::createReturnClass( ptr, "QRECT", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage rgbSwapped() const
*/
HB_FUNC_STATIC( QIMAGE_RGBSWAPPED )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      auto ptr = new QImage( obj->rgbSwapped() );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
bool save( const QString & fileName, const char * format = nullptr, int quality = -1 ) const
*/
void QImage_save1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->save( PQSTRING( 1 ), OPCONSTCHAR( 2, nullptr ), OPINT( 3, -1 ) ) );
  }
}

/*
bool save( QIODevice * device, const char * format = nullptr, int quality = -1 ) const
*/
void QImage_save2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->save( PQIODEVICE( 1 ), OPCONSTCHAR( 2, nullptr ), OPINT( 3, -1 ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_SAVE )
{
  if( ISBETWEEN( 1, 3 ) && HB_ISCHAR( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) && ( HB_ISNUM( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_save1();
  }
  else if( ISBETWEEN( 1, 3 ) && ISQIODEVICE( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) && ( HB_ISNUM( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_save2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage scaled( const QSize & size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
*/
void QImage_scaled1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->scaled( *PQSIZE( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::AspectRatioMode >( Qt::IgnoreAspectRatio ) : static_cast< Qt::AspectRatioMode >( hb_parni( 2 ) ), HB_ISNIL( 3 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 3 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

/*
QImage scaled( int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
*/
void QImage_scaled2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->scaled( PINT( 1 ), PINT( 2 ), HB_ISNIL( 3 ) ? static_cast< Qt::AspectRatioMode >( Qt::IgnoreAspectRatio ) : static_cast< Qt::AspectRatioMode >( hb_parni( 3 ) ), HB_ISNIL( 4 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 4 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

HB_FUNC_STATIC( QIMAGE_SCALED )
{
  if( ISBETWEEN( 1, 3 ) && ISQSIZE( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) && ( HB_ISNUM( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_scaled1();
  }
  else if( ISBETWEEN( 2, 4 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && ( HB_ISNUM( 3 ) || HB_ISNIL( 3 ) ) && ( HB_ISNUM( 4 ) || HB_ISNIL( 4 ) ) )
  {
    QImage_scaled2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QImage scaledToHeight( int height, Qt::TransformationMode mode = Qt::FastTransformation ) const
*/
HB_FUNC_STATIC( QIMAGE_SCALEDTOHEIGHT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 1, 2 ) && HB_ISNUM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
    {
#endif
      auto ptr = new QImage( obj->scaledToHeight( PINT( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 2 ) ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage scaledToWidth( int width, Qt::TransformationMode mode = Qt::FastTransformation ) const
*/
HB_FUNC_STATIC( QIMAGE_SCALEDTOWIDTH )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 1, 2 ) && HB_ISNUM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
    {
#endif
      auto ptr = new QImage( obj->scaledToWidth( PINT( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 2 ) ) ) );
      Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
uchar * scanLine(int i)
*/
/*
const uchar * scanLine(int i) const
*/

HB_FUNC_STATIC( QIMAGE_SCANLINE )
{
}

/*
void setColor( int index, QRgb colorValue )
*/
HB_FUNC_STATIC( QIMAGE_SETCOLOR )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 2 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
    {
#endif
      obj->setColor( PINT( 1 ), PQRGB( 2 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setColorCount( int colorCount )
*/
HB_FUNC_STATIC( QIMAGE_SETCOLORCOUNT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
    {
#endif
      obj->setColorCount( PINT( 1 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setDotsPerMeterX( int x )
*/
HB_FUNC_STATIC( QIMAGE_SETDOTSPERMETERX )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
    {
#endif
      obj->setDotsPerMeterX( PINT( 1 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setDotsPerMeterY( int y )
*/
HB_FUNC_STATIC( QIMAGE_SETDOTSPERMETERY )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
    {
#endif
      obj->setDotsPerMeterY( PINT( 1 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setOffset( const QPoint & offset )
*/
HB_FUNC_STATIC( QIMAGE_SETOFFSET )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && ISQPOINT( 1 ) )
    {
#endif
      obj->setOffset( *PQPOINT( 1 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setPixel( const QPoint & position, uint index_or_rgb )
*/
void QImage_setPixel1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->setPixel( *PQPOINT( 1 ), PUINT( 2 ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
void setPixel( int x, int y, uint index_or_rgb )
*/
void QImage_setPixel2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->setPixel( PINT( 1 ), PINT( 2 ), PUINT( 3 ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
}

HB_FUNC_STATIC( QIMAGE_SETPIXEL )
{
  if( ISNUMPAR( 2 ) && ISQPOINT( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_setPixel1();
  }
  else if( ISNUMPAR( 3 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
  {
    QImage_setPixel2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
void setText( const QString & key, const QString & text )
*/
HB_FUNC_STATIC( QIMAGE_SETTEXT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 2 ) && HB_ISCHAR( 1 ) && HB_ISCHAR( 2 ) )
    {
#endif
      obj->setText( PQSTRING( 1 ), PQSTRING( 2 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QSize size() const
*/
HB_FUNC_STATIC( QIMAGE_SIZE )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      auto ptr = new QSize( obj->size() );
      Qt5xHb::createReturnClass( ptr, "QSIZE", true );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
void swap( QImage & other )
*/
HB_FUNC_STATIC( QIMAGE_SWAP )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && ISQIMAGE( 1 ) )
    {
#endif
      obj->swap( *PQIMAGE( 1 ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
}

/*
QString text( const QString & key = QString() ) const
*/
HB_FUNC_STATIC( QIMAGE_TEXT )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 0, 1 ) && ( HB_ISCHAR( 1 ) || HB_ISNIL( 1 ) ) )
    {
#endif
      RQSTRING( obj->text( OPQSTRING( 1, QString() ) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QStringList textKeys() const
*/
HB_FUNC_STATIC( QIMAGE_TEXTKEYS )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RQSTRINGLIST( obj->textKeys() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
QImage transformed( const QMatrix & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
*/
void QImage_transformed1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->transformed( *PQMATRIX( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 2 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

/*
QImage transformed( const QTransform & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
*/
void QImage_transformed2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QImage( obj->transformed( *PQTRANSFORM( 1 ), HB_ISNIL( 2 ) ? static_cast< Qt::TransformationMode >( Qt::FastTransformation ) : static_cast< Qt::TransformationMode >( hb_parni( 2 ) ) ) );
    Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
  }
}

HB_FUNC_STATIC( QIMAGE_TRANSFORMED )
{
  if( ISBETWEEN( 1, 2 ) && ISQMATRIX( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_transformed1();
  }
  else if( ISBETWEEN( 1, 2 ) && ISQTRANSFORM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_transformed2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool valid( const QPoint & pos ) const
*/
void QImage_valid1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->valid( *PQPOINT( 1 ) ) );
  }
}

/*
bool valid( int x, int y ) const
*/
void QImage_valid2()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    RBOOL( obj->valid( PINT( 1 ), PINT( 2 ) ) );
  }
}

HB_FUNC_STATIC( QIMAGE_VALID )
{
  if( ISNUMPAR( 1 ) && ISQPOINT( 1 ) )
  {
    QImage_valid1();
  }
  else if( ISNUMPAR( 2 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_valid2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
int width() const
*/
HB_FUNC_STATIC( QIMAGE_WIDTH )
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 0 ) )
    {
#endif
      RINT( obj->width() );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
}

/*
static QImage fromData( const uchar * data, int size, const char * format = nullptr )
*/
void QImage_fromData1()
{
  auto ptr = new QImage( QImage::fromData( PCONSTUCHAR( 1 ), PINT( 2 ), OPCONSTCHAR( 3, nullptr ) ) );
  Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
}

/*
static QImage fromData( const QByteArray & data, const char * format = nullptr )
*/
void QImage_fromData2()
{
  auto ptr = new QImage( QImage::fromData( *PQBYTEARRAY( 1 ), OPCONSTCHAR( 2, nullptr ) ) );
  Qt5xHb::createReturnClass( ptr, "QIMAGE", true );
}

HB_FUNC_STATIC( QIMAGE_FROMDATA )
{
  if( ISBETWEEN( 2, 3 ) && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && ( HB_ISCHAR( 3 ) || HB_ISNIL( 3 ) ) )
  {
    QImage_fromData1();
  }
  else if( ISBETWEEN( 1, 2 ) && ISQBYTEARRAY( 1 ) && ( HB_ISCHAR( 2 ) || HB_ISNIL( 2 ) ) )
  {
    QImage_fromData2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
static QMatrix trueMatrix( const QMatrix & matrix, int width, int height )
*/
void QImage_trueMatrix1()
{
  auto ptr = new QMatrix( QImage::trueMatrix( *PQMATRIX( 1 ), PINT( 2 ), PINT( 3 ) ) );
  Qt5xHb::createReturnClass( ptr, "QMATRIX", true );
}

/*
static QTransform trueMatrix( const QTransform & matrix, int width, int height )
*/
void QImage_trueMatrix2()
{
  auto ptr = new QTransform( QImage::trueMatrix( *PQTRANSFORM( 1 ), PINT( 2 ), PINT( 3 ) ) );
  Qt5xHb::createReturnClass( ptr, "QTRANSFORM", true );
}

HB_FUNC_STATIC( QIMAGE_TRUEMATRIX )
{
  if( ISNUMPAR( 3 ) && ISQMATRIX( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
  {
    QImage_trueMatrix1();
  }
  else if( ISNUMPAR( 3 ) && ISQTRANSFORM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
  {
    QImage_trueMatrix2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
QColor pixelColor( const QPoint & position ) const
*/
void QImage_pixelColor1()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QColor( obj->pixelColor( *PQPOINT( 1 ) ) );
    Qt5xHb::createReturnClass( ptr, "QCOLOR", true );
  }
#endif
}

/*
QColor pixelColor( int x, int y ) const
*/
void QImage_pixelColor2()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    auto ptr = new QColor( obj->pixelColor( PINT( 1 ), PINT( 2 ) ) );
    Qt5xHb::createReturnClass( ptr, "QCOLOR", true );
  }
#endif
}

HB_FUNC_STATIC( QIMAGE_PIXELCOLOR )
{
  if( ISNUMPAR( 1 ) && ISQPOINT( 1 ) )
  {
    QImage_pixelColor1();
  }
  else if( ISNUMPAR( 2 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
  {
    QImage_pixelColor2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
bool reinterpretAsFormat( QImage::Format format )
*/
HB_FUNC_STATIC( QIMAGE_REINTERPRETASFORMAT )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,9,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISNUMPAR( 1 ) && HB_ISNUM( 1 ) )
    {
#endif
      RBOOL( obj->reinterpretAsFormat( static_cast<QImage::Format>( hb_parni( 1 ) ) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }
#endif
}

/*
void setPixelColor( const QPoint & position, const QColor & color )
*/
void QImage_setPixelColor1()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->setPixelColor( *PQPOINT( 1 ), HB_ISOBJECT( 2 ) ? *static_cast< QColor * >( Qt5xHb::itemGetPtr( 2 ) ) : QColor( hb_parc( 2 ) ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
void setPixelColor( int x, int y, const QColor & color )
*/
void QImage_setPixelColor2()
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,6,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    obj->setPixelColor( PINT( 1 ), PINT( 2 ), HB_ISOBJECT( 3 ) ? *static_cast< QColor * >( Qt5xHb::itemGetPtr( 3 ) ) : QColor( hb_parc( 3 ) ) );
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

HB_FUNC_STATIC( QIMAGE_SETPIXELCOLOR )
{
  if( ISNUMPAR( 2 ) && ISQPOINT( 1 ) && ISQCOLOR( 2 ) )
  {
    QImage_setPixelColor1();
  }
  else if( ISNUMPAR( 3 ) && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && ISQCOLOR( 3 ) )
  {
    QImage_setPixelColor2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
void convertTo( QImage::Format format, Qt::ImageConversionFlags flags = Qt::AutoColor )
*/
HB_FUNC_STATIC( QIMAGE_CONVERTTO )
{
#if (QT_VERSION >= QT_VERSION_CHECK(5,13,0))
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if( ISBETWEEN( 1, 2 ) && HB_ISNUM( 1 ) && ( HB_ISNUM( 2 ) || HB_ISNIL( 2 ) ) )
    {
#endif
      obj->convertTo( static_cast<QImage::Format>( hb_parni( 1 ) ), HB_ISNIL( 2 ) ? static_cast< Qt::ImageConversionFlags >( Qt::AutoColor ) : static_cast< Qt::ImageConversionFlags >( hb_parni( 2 ) ) );
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
    }
#endif
  }

  hb_itemReturn( hb_stackSelfItem() );
#endif
}

/*
QVariant toVariant()
*/
void QImage_toVariant1()
{
  auto obj = static_cast< QImage * >( Qt5xHb::itemGetPtrStackSelfItem() );

  if( obj != nullptr )
  {
    QVariant * variant = new QVariant();
    variant->setValue<QImage>( *obj );
    Qt5xHb::createReturnClass( variant, "QVARIANT", true );
  }
}

/*
static QVariant toVariant( const QImage & )
*/
void QImage_toVariant2()
{
  QImage * image = (QImage *) hb_itemGetPtr( hb_objSendMsg( hb_param( 1, HB_IT_OBJECT ), "POINTER", 0 ) );
  QVariant * variant = new QVariant();
  variant->setValue<QImage>( *image );
  Qt5xHb::createReturnClass( variant, "QVARIANT", true );
}

//[1]QVariant toVariant()
//[2]static QVariant toVariant( const QImage & )

HB_FUNC_STATIC( QIMAGE_TOVARIANT )
{
  if( ISNUMPAR( 0 ) )
  {
    QImage_toVariant1();
  }
  else if( ISNUMPAR( 1 ) && ISQIMAGE( 1 ) )
  {
    QImage_toVariant2();
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

/*
static QImage fromVariant( const QVariant & )
*/
HB_FUNC_STATIC( QIMAGE_FROMVARIANT )
{
  if( ISNUMPAR( 1 ) && ISQVARIANT( 1 ) )
  {
    QVariant * variant = (QVariant *) hb_itemGetPtr( hb_objSendMsg( hb_param( 1, HB_IT_OBJECT ), "POINTER", 0 ) );
    QImage * image = new QImage( variant->value<QImage>() );
    Qt5xHb::createReturnClass( image, "QIMAGE", true );
  }
  else
  {
    hb_errRT_BASE( EG_ARG, 3012, nullptr, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
  }
}

#pragma ENDDUMP
